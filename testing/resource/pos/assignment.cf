func len(x) {
  let sum = 0;
  for _ in x {
    sum += 1;
  }
  return sum;
}

{
  // basic
  let a = [];
  b = a;

  b[0] = 10;
  b[100] = 1;
  b[1] = 2;
  b[2] = 2;

  assert len(b) == 101;
}

{
  // aggregate assignment
  let a = 1;
  a += 1;
  trace "A: ", a;
  assert a == 2, 'aaa';

  a -= 1;
  assert a == 1, 'bbb';

  a *= 1;
  assert a == 1, 'ccc';

  a /= 1;
  assert a == 1, 'ddd';

  a = 100;
  a %= 3;
  assert a == (100 % 3);

  a = 2;
  a ^= 2;
  assert a == 4;
}

{

  let a = 10;
  let b = a;
  assert b == 10;
}

// complicated assignment
{
  let a = [0];

  a[0] += 1;
  assert a[0] == 1;
  
  a[0] -= 1;
  assert a[0] == 0;

  a[0] = 2;
  a[0] *= 2;
  assert a[0] == 4;

  a[0] /= 2;
  assert a[0] == 2;

  a[0] ^= 2;
  assert a[0] == 4;

  a[0] %= 2;
  assert a[0] == 0;
}

{
  let a = {};
  a.b = 0;

  a.b += 1;
  assert a.b == 1;
  
  a.b -= 1;
  assert a.b == 0;

  a.b = 2;
  a.b *= 2;
  assert a.b == 4;

  a.b /= 2;
  assert a.b == 2;

  a.b ^= 2;
  assert a.b == 4;

  a.b %= 2;
  assert a.b == 0;
}

{
  let x = [[[[0]]]];
  x[0][0][0][0] += 1;
  assert x[0][0][0][0] == 1;
}
{
  let x = {"a":{"a":{"a":{"a":1}}}};
  x.a.a.a.a += 1;
  assert x.a.a.a.a == 2;
}
